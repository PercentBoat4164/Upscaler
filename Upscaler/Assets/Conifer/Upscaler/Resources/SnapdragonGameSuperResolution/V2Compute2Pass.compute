//============================================================================================================
//
//
//                  Copyright (c) 2024, Qualcomm Innovation Center, Inc. All rights reserved.
//                              SPDX-License-Identifier: BSD-3-Clause
//
//============================================================================================================
#pragma kernel convert
#pragma kernel upscale

#pragma multi_compile_local _ CONIFER__UPSCALER__ENABLE_OUTPUT_RESOLUTION_MOTION_VECTORS

#define EPSILON 1.19e-07f
#define SEPARATION 1.37e-05f
#define TOLERANCE 1.0e-05f

SamplerState       pointClampSampler : register(s0);
RWTexture2D<uint>  Conifer_Upscaler_LumaSink;
Texture2D<uint>    Conifer_Upscaler_Luma;
RWTexture2D<half4> Conifer_Upscaler_MotionDepthAlphaBufferSink;
Texture2D<half4>   Conifer_Upscaler_MotionDepthAlphaBuffer;
Texture2D<half4>   Conifer_Upscaler_History;
RWTexture2D<half4> Conifer_Upscaler_NextHistory;
Texture2D<half4>   _MainTex;
RWTexture2D<half4> Conifer_Upscaler_OutputSink;
Texture2D<float>   Conifer_Upscaler_Depth;
Texture2D<half2>   Conifer_Upscaler_MotionVectors;

float2 Conifer_Upscaler_RenderSize;
float2 Conifer_Upscaler_OutputSize;
float2 Conifer_Upscaler_RenderSizeRcp;
float2 Conifer_Upscaler_OutputSizeRcp;
float2 Conifer_Upscaler_JitterOffset;
float2 Conifer_Upscaler_ScaleRatio;
float  Conifer_Upscaler_CameraFovAngleHor;
float  Conifer_Upscaler_MinLerpContribution;
float  Conifer_Upscaler_Reset;
uint   Conifer_Upscaler_SameCamera;
half   Conifer_Upscaler_PreExposure;

[numthreads(8, 8, 1)]
void convert(uint3 id : SV_DispatchThreadID) {
    float2 gatherCoord = float2(id.xy) * Conifer_Upscaler_RenderSizeRcp.xy;
    float4 topleft     = Conifer_Upscaler_Depth.Gather(pointClampSampler, gatherCoord, 0);
    float4 topRight    = Conifer_Upscaler_Depth.Gather(pointClampSampler, gatherCoord + float2(Conifer_Upscaler_RenderSizeRcp.x * 2.0, 0.0), 0);
    float4 bottomLeft  = Conifer_Upscaler_Depth.Gather(pointClampSampler, gatherCoord + float2(0.0, Conifer_Upscaler_RenderSizeRcp.y * 2.0), 0);
    float4 bottomRight = Conifer_Upscaler_Depth.Gather(pointClampSampler, gatherCoord + Conifer_Upscaler_RenderSizeRcp * 2.0, 0);
    float  maxC        = min(min(min(topleft.y, topRight.x), bottomLeft.z), bottomRight.w);

    float depthclip = 0.0;
    if (maxC < 1.0 - TOLERANCE) {
        float topleft4     = min(min(min(topleft.y, topleft.x), topleft.z), topleft.w);
        float topRight4    = min(min(min(topRight.y, topRight.x), topRight.z), topRight.w);
        float bottomLeft4  = min(min(min(bottomLeft.y, bottomLeft.x), bottomLeft.z), bottomLeft.w);
        float bottomRight4 = min(min(min(bottomRight.y, bottomRight.x), bottomRight.z), bottomRight.w);

        float Wdepth             = 0.0;
        float Ksep               = SEPARATION;
        float diagonal_length    = length(float2(Conifer_Upscaler_RenderSize));
        float Ksep_Kfov_diagonal = Ksep * Conifer_Upscaler_CameraFovAngleHor * diagonal_length;

        float Depthsep = Ksep_Kfov_diagonal * (1.0 - maxC);
        Wdepth += clamp(Depthsep / (abs(maxC - topleft4) + EPSILON), 0.0, 1.0);
        Wdepth += clamp(Depthsep / (abs(maxC - topRight4) + EPSILON), 0.0, 1.0);
        Wdepth += clamp(Depthsep / (abs(maxC - bottomLeft4) + EPSILON), 0.0, 1.0);
        Wdepth += clamp(Depthsep / (abs(maxC - bottomRight4) + EPSILON), 0.0, 1.0);
        depthclip = clamp(1.0f - Wdepth * 0.25, 0.0, 1.0);
    }

    half3  Colorrgb = _MainTex.Load(int3(id.xy, 0)).xyz;

    float ColorMax = max(max(Colorrgb.x, Colorrgb.y), Colorrgb.z) + Conifer_Upscaler_PreExposure;
    Colorrgb /= ColorMax;

    float3 Colorycocg;
    Colorycocg.x = 0.25 * (Colorrgb.x + 2.0 * Colorrgb.y + Colorrgb.z);
    Colorycocg.y = clamp(0.5 * Colorrgb.x + 0.5 - 0.5 * Colorrgb.z, 0.0, 1.0);
    Colorycocg.z = clamp(Colorycocg.x + Colorycocg.y - Colorrgb.x, 0.0, 1.0);

    Conifer_Upscaler_LumaSink[id.xy]                   = uint(Colorycocg.x * 2047.5) << 21u | uint(Colorycocg.y * 2047.5) << 10u | uint(Colorycocg.z * 1023.5);
#if defined(CONIFER__UPSCALER__ENABLE_OUTPUT_RESOLUTION_MOTION_VECTORS)
    Conifer_Upscaler_MotionDepthAlphaBufferSink[id.xy] = half4(Conifer_Upscaler_MotionVectors.Load(int3(id.xy * Conifer_Upscaler_ScaleRatio.xx, 0)), depthclip, ColorMax);
#else
    Conifer_Upscaler_MotionDepthAlphaBufferSink[id.xy] = half4(Conifer_Upscaler_MotionVectors.Load(int3(id.xy, 0)), depthclip, ColorMax);
#endif
}

float FastLanczos(float base) {
    float y = base - 1.0f;
    float y2 = y * y;
    float y_temp = 0.75f * y + y2;
    return y_temp * y2;
}

float3 DecodeColor(uint sample32) {
    uint x11 = sample32 >> 21u;
    uint y11 = sample32 & 2047u << 10u;
    uint z10 = sample32 & 1023u;
    return float3(float(x11) * (1.0 / 2047.5), float(y11) * 4.76953602e-7 - 0.5, float(z10) * (1.0 / 1023.5) - 0.5);
}

[numthreads(8, 8, 1)]
void upscale(uint3 id : SV_DispatchThreadID) {
    float Biasmax_viewportXScale = min(Conifer_Upscaler_ScaleRatio.x, 1.99);
    float scalefactor = Conifer_Upscaler_ScaleRatio.y;
    float2 HistoryInfoViewportSizeInverse = Conifer_Upscaler_OutputSizeRcp;
    float2 HistoryInfoViewportSize = float2(Conifer_Upscaler_OutputSize);
    float2 InputJitter = Conifer_Upscaler_JitterOffset;
    float2 InputInfoViewportSize = float2(Conifer_Upscaler_RenderSize);
    float2 Hruv = (float2(id.xy) + 0.5) * HistoryInfoViewportSizeInverse;
    float2 Jitteruv;
    Jitteruv.x = clamp(Hruv.x + InputJitter.x * HistoryInfoViewportSizeInverse.x, 0.0, 1.0);
    Jitteruv.y = clamp(Hruv.y + InputJitter.y * HistoryInfoViewportSizeInverse.y, 0.0, 1.0);

    int2 InputPos = int2(Jitteruv * InputInfoViewportSize);
    float4 mda = Conifer_Upscaler_MotionDepthAlphaBuffer.SampleLevel(pointClampSampler, Jitteruv, 0.0).xyzw;
    float2 Motion = mda.xy;

    float2 PrevUV = clamp(Hruv - Motion, 0.0, 1.0);
    float depthfactor = mda.z;
    float ColorMax = mda.w;

    float4 History = Conifer_Upscaler_History.SampleLevel(pointClampSampler, PrevUV, 0.0);
    float3 HistoryColor = History.xyz;
    float Historyw = History.w;
    float Wfactor = clamp(abs(Historyw), 0.0, 1.0);

    float4 Upsampledcw = 0.0;
    float kernelfactor = clamp(Wfactor + Conifer_Upscaler_Reset, 0.0, 1.0);
    float biasmax = Biasmax_viewportXScale - Biasmax_viewportXScale * kernelfactor;
    float biasmin = max(1.0f, 0.3 + 0.3 * biasmax);
    float biasfactor = max(0.25f * depthfactor, kernelfactor);
    float kernelbias = lerp(biasmax, biasmin, biasfactor);
    float motion_viewport_len = length(Motion * HistoryInfoViewportSize);
    float curvebias = lerp(-2.0, -3.0, clamp(motion_viewport_len * 0.02, 0.0, 1.0));

    float3 rectboxcenter = 0.0;
    float3 rectboxvar = 0.0;
    float rectboxweight = 0.0;
    float2 srcpos = float2(InputPos) + 0.5 - InputJitter;
    float2 srcOutputPos = Hruv * InputInfoViewportSize;

    kernelbias *= 0.5f;
    float kernelbias2 = kernelbias * kernelbias;
    float2 srcpos_srcOutputPos = srcpos - srcOutputPos;

    int2 InputPosBtmRight = 1 + InputPos;
    float2 gatherCoord = float2(InputPos) * Conifer_Upscaler_RenderSizeRcp;
    uint btmRight = Conifer_Upscaler_Luma.Load(int3(InputPosBtmRight, 0)).x;
    uint4 topleft = Conifer_Upscaler_Luma.Gather(pointClampSampler, gatherCoord);
    uint2 topRight = 0;
    uint2 bottomLeft = 0;


	if (Conifer_Upscaler_SameCamera) {
		topRight = Conifer_Upscaler_Luma.Gather(pointClampSampler, gatherCoord + float2(Conifer_Upscaler_RenderSizeRcp.x, 0.0)).yz;
		bottomLeft = Conifer_Upscaler_Luma.Gather(pointClampSampler, gatherCoord + float2(0.0, Conifer_Upscaler_RenderSizeRcp.y)).xy;
	} else {
		uint2 btmRight = Conifer_Upscaler_Luma.Gather(pointClampSampler, gatherCoord + float2(Conifer_Upscaler_RenderSizeRcp.x, Conifer_Upscaler_RenderSizeRcp.y)).xz;
		bottomLeft.y = btmRight.x;
		topRight.x = btmRight.y;
	}

    float3 rectboxmin;
    float3 rectboxmax;
    {
        float3 samplecolor = DecodeColor(bottomLeft.y);
        float2 baseoffset = srcpos_srcOutputPos + float2(0.0, 1.0);
        float baseoffset_dot = dot(baseoffset, baseoffset);
        float base = clamp(baseoffset_dot * kernelbias2, 0.0f, 1.0f);
        float weight = FastLanczos(base);
        Upsampledcw += float4(samplecolor * weight, weight);
        float boxweight = exp(baseoffset_dot * curvebias);
        rectboxmin = samplecolor;
        rectboxmax = samplecolor;
        float3 wsample = samplecolor * boxweight;
        rectboxcenter += wsample;
        rectboxvar += samplecolor * wsample;
        rectboxweight += boxweight;
    }
    {
        float3 samplecolor = DecodeColor(topRight.x);
        float2 baseoffset = srcpos_srcOutputPos + float2(1.0, 0.0);
        float baseoffset_dot = dot(baseoffset, baseoffset);
        float base = clamp(baseoffset_dot * kernelbias2, 0.0f, 1.0f);
        float weight = FastLanczos(base);
        Upsampledcw += float4(samplecolor * weight, weight);
        float boxweight = exp(baseoffset_dot * curvebias);
        rectboxmin = min(rectboxmin, samplecolor);
        rectboxmax = max(rectboxmax, samplecolor);
        float3 wsample = samplecolor * boxweight;
        rectboxcenter += wsample;
        rectboxvar += samplecolor * wsample;
        rectboxweight += boxweight;
    }
    {
        float3 samplecolor = DecodeColor(topleft.x);
        float2 baseoffset = srcpos_srcOutputPos + float2(-1.0, 0.0);
        float baseoffset_dot = dot(baseoffset, baseoffset);
        float base = clamp(baseoffset_dot * kernelbias2, 0.0f, 1.0f);
        float weight = FastLanczos(base);
        Upsampledcw += float4(samplecolor * weight, weight);
        float boxweight = exp(baseoffset_dot * curvebias);
        rectboxmin = min(rectboxmin, samplecolor);
        rectboxmax = max(rectboxmax, samplecolor);
        float3 wsample = samplecolor * boxweight;
        rectboxcenter += wsample;
        rectboxvar += samplecolor * wsample;
        rectboxweight += boxweight;
    }
    {
        float3 samplecolor = DecodeColor(topleft.y);
        float2 baseoffset = srcpos_srcOutputPos;
        float baseoffset_dot = dot(baseoffset, baseoffset);
        float base = clamp(baseoffset_dot * kernelbias2, 0.0f, 1.0f);
        float weight = FastLanczos(base);
        Upsampledcw += float4(samplecolor * weight, weight);
        float boxweight = exp(baseoffset_dot * curvebias);
        rectboxmin = min(rectboxmin, samplecolor);
        rectboxmax = max(rectboxmax, samplecolor);
        float3 wsample = samplecolor * boxweight;
        rectboxcenter += wsample;
        rectboxvar += samplecolor * wsample;
        rectboxweight += boxweight;
    }
    {
        float3 samplecolor = DecodeColor(topleft.z);
        float2 baseoffset = srcpos_srcOutputPos + float2(0.0, -1.0);
        float baseoffset_dot = dot(baseoffset, baseoffset);
        float base = clamp(baseoffset_dot * kernelbias2, 0.0f, 1.0f);
        float weight = FastLanczos(base);
        Upsampledcw += float4(samplecolor * weight, weight);
        float boxweight = exp(baseoffset_dot * curvebias);
        rectboxmin = min(rectboxmin, samplecolor);
        rectboxmax = max(rectboxmax, samplecolor);
        float3 wsample = samplecolor * boxweight;
        rectboxcenter += wsample;
        rectboxvar += samplecolor * wsample;
        rectboxweight += boxweight;
    }

    if (Conifer_Upscaler_SameCamera)
    {
        {
            float3 samplecolor = DecodeColor(btmRight);
            float2 baseoffset = srcpos_srcOutputPos + float2(1.0, 1.0);
            float baseoffset_dot = dot(baseoffset, baseoffset);
            float base = clamp(baseoffset_dot * kernelbias2, 0.0, 1.0);
            float weight = FastLanczos(base);
            Upsampledcw += float4(samplecolor * weight, weight);
            float boxweight = exp(baseoffset_dot * curvebias);
            rectboxmin = min(rectboxmin, samplecolor);
            rectboxmax = max(rectboxmax, samplecolor);
            float3 wsample = samplecolor * boxweight;
            rectboxcenter += wsample;
            rectboxvar += samplecolor * wsample;
            rectboxweight += boxweight;
        }
        {
            float3 samplecolor = DecodeColor(bottomLeft.x);
            float2 baseoffset = srcpos_srcOutputPos + float2(-1.0, 1.0);
            float baseoffset_dot = dot(baseoffset, baseoffset);
            float base = clamp(baseoffset_dot * kernelbias2, 0.0f, 1.0f);
            float weight = FastLanczos(base);
            Upsampledcw += float4(samplecolor * weight, weight);
            float boxweight = exp(baseoffset_dot * curvebias);
            rectboxmin = min(rectboxmin, samplecolor);
            rectboxmax = max(rectboxmax, samplecolor);
            float3 wsample = samplecolor * boxweight;
            rectboxcenter += wsample;
            rectboxvar += samplecolor * wsample;
            rectboxweight += boxweight;
        }
        {
            float3 samplecolor = DecodeColor(topRight.y);
            float2 baseoffset = srcpos_srcOutputPos + float2(1.0, -1.0);
            float baseoffset_dot = dot(baseoffset, baseoffset);
            float base = clamp(baseoffset_dot * kernelbias2, 0.0f, 1.0f);
            float weight = FastLanczos(base);
            Upsampledcw += float4(samplecolor * weight, weight);
            float boxweight = exp(baseoffset_dot * curvebias);
            rectboxmin = min(rectboxmin, samplecolor);
            rectboxmax = max(rectboxmax, samplecolor);
            float3 wsample = samplecolor * boxweight;
            rectboxcenter += wsample;
            rectboxvar += samplecolor * wsample;
            rectboxweight += boxweight;
        }

        {
            float3 samplecolor = DecodeColor(topleft.w);
            float2 baseoffset = srcpos_srcOutputPos + float2(-1.0, -1.0);
            float baseoffset_dot = dot(baseoffset, baseoffset);
            float base = clamp(baseoffset_dot * kernelbias2, 0.0f, 1.0f);
            float weight = FastLanczos(base);
            Upsampledcw += float4(samplecolor * weight, weight);
            float boxweight = exp(baseoffset_dot * curvebias);
            rectboxmin = min(rectboxmin, samplecolor);
            rectboxmax = max(rectboxmax, samplecolor);
            float3 wsample = samplecolor * boxweight;
            rectboxcenter += wsample;
            rectboxvar += samplecolor * wsample;
            rectboxweight += boxweight;
        }
    }

    rectboxweight = 1.0 / rectboxweight;
    rectboxcenter *= rectboxweight;
    rectboxvar *= rectboxweight;
    rectboxvar = sqrt(abs(rectboxvar - rectboxcenter * rectboxcenter));

    Upsampledcw.xyz =  clamp(Upsampledcw.xyz / Upsampledcw.w, rectboxmin - 0.05, rectboxmax + 0.05);
    Upsampledcw.w = Upsampledcw.w * (1.0f / 3.0f) ;

	float OneMinusWfactor = 1.0f - Wfactor;

    float baseupdate = OneMinusWfactor - OneMinusWfactor * depthfactor;
    baseupdate = min(baseupdate, lerp(baseupdate, Upsampledcw.w *10.0f, clamp(10.0f* motion_viewport_len, 0.0, 1.0)));
    baseupdate = min(baseupdate, lerp(baseupdate, Upsampledcw.w, clamp(motion_viewport_len *0.05f, 0.0, 1.0)));
    float basealpha = baseupdate;

    float boxscale = max(depthfactor, clamp(motion_viewport_len * 0.05f, 0.0, 1.0));
    float boxsize = lerp(scalefactor, 1.0f, boxscale);
    float3 sboxvar = rectboxvar * boxsize;
    float3 boxmin = rectboxcenter - sboxvar;
    float3 boxmax = rectboxcenter + sboxvar;
    rectboxmax = min(rectboxmax, boxmax);
    rectboxmin = max(rectboxmin, boxmin);

    float3 clampedcolor = clamp(HistoryColor, rectboxmin, rectboxmax);
    if (abs(mda.x) + abs(mda.y) > 0.000001) Conifer_Upscaler_MinLerpContribution = 0.0;
	float lerpcontribution = any(rectboxmin > HistoryColor) || any(HistoryColor > rectboxmax) ? Conifer_Upscaler_MinLerpContribution : 1.0f;

	HistoryColor = lerp(clampedcolor, HistoryColor, clamp(lerpcontribution, 0.0, 1.0));
    float basemin = min(basealpha, 0.1f);
    basealpha = lerp(basemin, basealpha, clamp(lerpcontribution, 0.0, 1.0));

    float alphasum = max(EPSILON, basealpha + Upsampledcw.w);
    float alpha = clamp(Upsampledcw.w / alphasum + Conifer_Upscaler_Reset, 0.0, 1.0);
    Upsampledcw.xyz = lerp(HistoryColor, Upsampledcw.xyz, alpha);

    Conifer_Upscaler_NextHistory[id.xy] = float4(Upsampledcw.xyz, Wfactor);

    float x_z = Upsampledcw.x - Upsampledcw.z;
    Upsampledcw.xyz = float3(
        clamp(x_z + Upsampledcw.y, 0.0, 1.0),
        clamp(Upsampledcw.x + Upsampledcw.z, 0.0, 1.0),
        clamp(x_z - Upsampledcw.y, 0.0, 1.0));

    float scale = Conifer_Upscaler_PreExposure /  (1.0f + 600.0f / 65504.0f - clamp(max(max(Upsampledcw.x, Upsampledcw.y), Upsampledcw.z), 0.0f, 1.0f));

    if (ColorMax > 4000.0f) scale = ColorMax;
    Upsampledcw.xyz = Upsampledcw.xyz * scale;
    Conifer_Upscaler_OutputSink[id.xy] = Upsampledcw;
}