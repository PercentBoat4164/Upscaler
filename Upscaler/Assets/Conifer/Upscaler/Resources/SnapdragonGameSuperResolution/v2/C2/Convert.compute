//============================================================================================================
//
//
//                  Copyright (c) 2024, Qualcomm Innovation Center, Inc. All rights reserved.
//                              SPDX-License-Identifier: BSD-3-Clause
//
//============================================================================================================
#pragma target 5.0
#pragma kernel main

#define EPSILON 1.19e-07f
#define SEPARATION 1.37e-05f
#define TOLERANCE 1.0e-05f

SamplerState       pointClampSampler : register(s0);
RWTexture2D<uint>  Conifer_Upscaler_LumaSink;
RWTexture2D<half4> Conifer_Upscaler_MotionDepthAlphaBufferSink;
Texture2D<float>   _CameraDepthTexture;
Texture2D<half2>   _MotionVectorTexture;
Texture2D<half4>   _CameraColorTexture;
Texture2D<half3>   _CameraOpaqueTexture;

float2 Conifer_Upscaler_RenderSize;
float2 Conifer_Upscaler_RenderSizeRcp;
float2 Conifer_Upscaler_ScaleRatio;
float  Conifer_Upscaler_CameraFovAngleHor;
half   Conifer_Upscaler_PreExposure;

[numthreads(8, 8, 1)]
void main(uint3 id : SV_DispatchThreadID) {
    float2 gatherCoord = float2(id.xy) * Conifer_Upscaler_RenderSizeRcp.xy;
    float4 topleft     = _CameraDepthTexture.Gather(pointClampSampler, gatherCoord, 0);
    float4 topRight    = _CameraDepthTexture.Gather(pointClampSampler, gatherCoord + float2(Conifer_Upscaler_RenderSizeRcp.x * 2.0, 0.0), 0);
    float4 bottomLeft  = _CameraDepthTexture.Gather(pointClampSampler, gatherCoord + float2(0.0, Conifer_Upscaler_RenderSizeRcp.y * 2.0), 0);
    float4 bottomRight = _CameraDepthTexture.Gather(pointClampSampler, gatherCoord + Conifer_Upscaler_RenderSizeRcp * 2.0, 0);
    float  maxC        = min(min(min(topleft.y, topRight.x), bottomLeft.z), bottomRight.w);

    float depthclip = 0.0;
    if (maxC < 1.0 - TOLERANCE) {
        float topleft4     = min(min(min(topleft.y, topleft.x), topleft.z), topleft.w);
        float topRight4    = min(min(min(topRight.y, topRight.x), topRight.z), topRight.w);
        float bottomLeft4  = min(min(min(bottomLeft.y, bottomLeft.x), bottomLeft.z), bottomLeft.w);
        float bottomRight4 = min(min(min(bottomRight.y, bottomRight.x), bottomRight.z), bottomRight.w);

        float Wdepth             = 0.0;
        float Ksep               = SEPARATION;
        float diagonal_length    = length(float2(Conifer_Upscaler_RenderSize));
        float Ksep_Kfov_diagonal = Ksep * Conifer_Upscaler_CameraFovAngleHor * diagonal_length;

        float Depthsep = Ksep_Kfov_diagonal * (1.0 - maxC);
        Wdepth += clamp(Depthsep / (abs(maxC - topleft4) + EPSILON), 0.0, 1.0);
        Wdepth += clamp(Depthsep / (abs(maxC - topRight4) + EPSILON), 0.0, 1.0);
        Wdepth += clamp(Depthsep / (abs(maxC - bottomLeft4) + EPSILON), 0.0, 1.0);
        Wdepth += clamp(Depthsep / (abs(maxC - bottomRight4) + EPSILON), 0.0, 1.0);
        depthclip = clamp(1.0f - Wdepth * 0.25, 0.0, 1.0);
    }

    half3  Colorrgb = _CameraColorTexture.Load(int3(id.xy, 0)).xyz;

    float ColorMax = max(max(Colorrgb.x, Colorrgb.y), Colorrgb.z) + Conifer_Upscaler_PreExposure;
    Colorrgb /= ColorMax;

    float3 Colorycocg;
    Colorycocg.x = 0.25 * (Colorrgb.x + 2.0 * Colorrgb.y + Colorrgb.z);
    Colorycocg.y = clamp(0.5 * Colorrgb.x + 0.5 - 0.5 * Colorrgb.z, 0.0, 1.0);
    Colorycocg.z = clamp(Colorycocg.x + Colorycocg.y - Colorrgb.x, 0.0, 1.0);

    Conifer_Upscaler_LumaSink[id.xy]                   = uint(Colorycocg.x * 2047.5) << 21u | uint(Colorycocg.y * 2047.5) << 10u | uint(Colorycocg.z * 1023.5);
    Conifer_Upscaler_MotionDepthAlphaBufferSink[id.xy] = half4(_MotionVectorTexture.Load(int3(id.xy * Conifer_Upscaler_ScaleRatio.x, 0)), depthclip, ColorMax);
}